/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.android.admob;

import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.preference.PreferenceManager;

import androidx.annotation.Nullable;

import com.applovin.sdk.AppLovinPrivacySettings;
import com.google.ads.mediation.inmobi.InMobiConsent;
import com.inmobi.media.L;
import com.inmobi.sdk.InMobiSdk;
import com.google.android.gms.ads.MobileAds;
import com.google.android.gms.ads.RequestConfiguration;
import com.google.android.gms.ads.initialization.AdapterStatus;
import com.google.android.gms.ads.initialization.InitializationStatus;
import com.google.android.gms.ads.initialization.OnInitializationCompleteListener;
import com.google.android.ump.ConsentDebugSettings;
import com.google.android.ump.ConsentForm;
import com.google.android.ump.ConsentInformation;
import com.google.android.ump.ConsentRequestParameters;
import com.google.android.ump.FormError;
import com.google.android.ump.UserMessagingPlatform;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBlob;
import org.appcelerator.titanium.io.TiBaseFile;
import org.appcelerator.titanium.util.TiConvert;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

@Kroll.module(name="Admob", id="ti.android.admob")
public class AdmobModule extends KrollModule
{
    private static final String TAG = "Admob Module";
    public static String MODULE_NAME = "Admob";

    //CONSENT
    private ConsentInformation consentInformation;
    private ConsentForm _consentForm;

    //EVENTS
    @Kroll.constant
    public static final String ADMOB_READY = "ready";
    @Kroll.constant
    public static final String ADMOB_NOT_READY_YET = "not_ready_yet";
    @Kroll.constant
    public static final String AD_RECEIVED = "ad_received";
    @Kroll.constant
    public static final String AD_NOT_RECEIVED = "ad_received";
    @Kroll.constant
    public static final String AD_CLOSED = "ad_closed";
    @Kroll.constant
    public static final String AD_FAILED_TO_LOAD = "ad_failed_to_load";
    @Kroll.constant
    public static final String AD_LOADED = "ad_loaded";
    @Kroll.constant
    public static final String AD_OPENED = "ad_opened";

    @Kroll.constant
    public static final String AD_NOT_READY= "ad_not_ready";
    @Kroll.constant
    public static final String AD_FAILED_TO_SHOW = "ad_failed_to_show";
    @Kroll.constant
    public static final String AD_REWARDED = "ad_rewarded";
    @Kroll.constant
    public static final String AD_CLICKED = "ad_clicked";
    @Kroll.constant
    public static final String AD_SHOWED_FULLSCREEN_CONTENT = "ad_showed_fullscreen_content";
    @Kroll.constant
    public static final String CONSENT_ERROR = "consent_error";
    @Kroll.constant
    public static final String CONSENT_INFO_UPDATE_FAILURE = "consent_info_update_failure";
    @Kroll.constant
    public static final String CONSENT_FORM_DISMISSED = "consent_form_dismissed";
    @Kroll.constant
    public static final String CONSENT_FORM_LOADED = "consent_form_loaded";
    @Kroll.constant
    public static final String CONSENT_NOT_REQUIRED = "consent_not_required";
    @Kroll.constant
    public static final String CONSENT_REQUIRED = "consent_required";

    //AD SIZES
    @Kroll.constant
    public static final String BANNER = "BANNER";                       // 320x50
    @Kroll.constant
    public static final String LARGE_BANNER = "LARGE_BANNER";           // 320x100
    @Kroll.constant
    public static final String MEDIUM_RECTANGLE = "MEDIUM_RECTANGLE";   // 300x250
    @Kroll.constant
    public static final String FULL_BANNER = "FULL_BANNER";             // 468x60
    @Kroll.constant
    public static final String LEADERBOARD = "LEADERBOARD";             // 728x90
    @Kroll.constant
    public static final String SMART_BANNER = "SMART_BANNER";           // Screen width x 32|50|90

    @Kroll.constant
    public static final String NATIVE_ADS = "NATIVE_ADS";

    // ADAPTIVE TYPES
    @Kroll.constant
    public static final String ADAPTIVE_ANCHORED = "ADAPTIVE_ANCHORED";

    @Kroll.constant
    public static final String ADAPTIVE_INLINE = "ADAPTIVE_INLINE";

    @Kroll.constant
    public static final String COLLAPSIBLE_BOTTOM = "bottom";

    @Kroll.constant
    public static final String COLLAPSIBLE_TOP = "top";

    // AD UNIT IDS
    public static String AD_UNIT_ID;
    public static String BANNER_AD_UNIT_ID;
    public static String INTERSTITIAL_AD_UNIT_ID;
    public static String APP_OPEN_AD_UNIT_ID;
    public static String REWARDED_AD_UNIT_ID;
    public static String REWARDED_INTERSTITIAL_AD_UNIT_ID;
    public static String NATIVE_AD_UNIT_ID;

    public static String TEST_DEVICE_ID;
    public static String PROPERTY_COLOR_BG;
    public static String NATIVE_ADS_BACKGROUND_COLOR;
    public static String PROPERTY_COLOR_BG_TOP;
    public static String PROPERTY_COLOR_BORDER;
    public static String PROPERTY_COLOR_TEXT;
    public static String PROPERTY_COLOR_LINK;
    public static String PROPERTY_COLOR_URL;
    public static String PROPERTY_COLOR_TEXT_DEPRECATED;
    public static String PROPERTY_COLOR_LINK_DEPRECATED;
    public static String AD_SIZE_TYPE;
    public static String AD_SIZES_LABEL;
    public static String KEYWORD;
    public static String CONTENT_URL;
    public static String CUSTOM_NATIVE_TEMPLATE_ID;
    
    public static String VIEW_TYPE;

    public static Boolean INIT_READY = false;
    
    @Kroll.constant
    public static final String TYPE_ADS = "ads";
    
    @Kroll.constant
    public static final String TYPE_STARS = "stars";
    
    @Kroll.constant
    public static final String TYPE_MEDIA = "media";
    
    public static String MASTER_VIEW;
    public static String MEDIA_VIEW;
    public static String HEADLINE_LABEL;
    public static String IMAGE_VIEW;
    public static String IMAGE_LOGO;
    public static String BODY_LABEL;
    public static String CALL_TO_ACTION_BUTTON;
    public static String LOGO_OR_ICON_IMAGE_VIEW;
    public static String ADVERTISER_LABEL;
    public static String STORE_LABEL;
    public static String STARS_VIEW;
    public static String PRICE_LABEL;
    public static String EXTRA_BUNDLE;

    // Colors
    static Bundle extras;
    public static String prop_color_bg;
    public static String prop_color_bg_top;
    public static String prop_color_border;
    public static String prop_color_text;
    public static String prop_color_link;
    public static String prop_color_url;

    public AdmobModule() {
        super(MODULE_NAME);
        Log.d(TAG, "Admob Module Instantiated");
    }

    static {
        PROPERTY_COLOR_BG = "backgroundColor";
        PROPERTY_COLOR_BG_TOP = "backgroundTopColor";
        PROPERTY_COLOR_BORDER = "borderColor";
        PROPERTY_COLOR_TEXT = "textColor";
        PROPERTY_COLOR_LINK = "linkColor";
        PROPERTY_COLOR_URL = "urlColor";
        PROPERTY_COLOR_TEXT_DEPRECATED = "primaryTextColor";
        PROPERTY_COLOR_LINK_DEPRECATED = "secondaryTextColor";
        AD_SIZE_TYPE = "adSizeType";
        AD_SIZES_LABEL = "adSizes";
        
        VIEW_TYPE = "viewType";
        
        MASTER_VIEW = "masterView";
        MEDIA_VIEW = "mediaView";
        HEADLINE_LABEL = "headlineLabel";
        IMAGE_VIEW = "imageView";
        BODY_LABEL = "bodyLabel";
        CALL_TO_ACTION_BUTTON = "callToActionButton";
        IMAGE_LOGO = "imageLogo";
        LOGO_OR_ICON_IMAGE_VIEW = "logoOrIconImageView";
        ADVERTISER_LABEL = "advertiserLabel";
        STORE_LABEL = "storeLabel";
        STARS_VIEW = "starsView";
        PRICE_LABEL = "priceLabel";
        NATIVE_ADS_BACKGROUND_COLOR = "backgroundColor";
        
        KEYWORD = "keyword";
        CONTENT_URL = "contentUrl";
        CUSTOM_NATIVE_TEMPLATE_ID = "customNativeTemplateId";
        
        EXTRA_BUNDLE = "extras";
    }

    // Handle creation options
    @Override
    public void handleCreationDict(KrollDict options) {
        Log.d(TAG, "handleCreationDict...");
        super.handleCreationDict(options);
    }

    public static AdmobModule getModuleInstance() {
        TiApplication appContext = TiApplication.getInstance();
        AdmobModule module = (AdmobModule) appContext.getModuleByName(MODULE_NAME);
        return module;
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
        Log.d(TAG, "-- Ti.Android.Admob -> onAppCreate --");
        initializeMobileAdsSdk();
    }

    @Kroll.method
    public static void initializeMobileAdsSdk(){

        Log.d(TAG, ("Initializing Mobile Ads SDK!"));

        Context appContext = TiApplication.getInstance().getApplicationContext();

        MobileAds.initialize(appContext, new OnInitializationCompleteListener() {
            @Override
            public void onInitializationComplete(InitializationStatus initializationStatus) {
                Map<String, AdapterStatus> statusMap = initializationStatus.getAdapterStatusMap();
                for (String adapterClass : statusMap.keySet()) {
                    AdapterStatus status = statusMap.get(adapterClass);
                    Log.d("Admob Adapters", String.format(
                            "Adapter name: %s, Description: %s, Latency: %d",
                            adapterClass, status.getDescription(), status.getLatency()));
                }

                // Start loading ads here...
                Log.d(TAG, "-- All Adapters are ready to request ads --");

                AdmobModule module = getModuleInstance();
                if (module != null && module.hasListeners(ADMOB_READY)) {
                    module.fireEvent(ADMOB_READY, new KrollDict());
                }

                Log.d(TAG, "ADMOB_READY");
                Log.d(TAG, "-- INIT_READY is now TRUE --");

                INIT_READY = true;
            }
        });
    }

    @Kroll.method
    public void setAppVolume(String percentage){
        Float percent = convertPercentage(percentage);
        // Set app volume to be half of current device volume.
        MobileAds.setAppVolume(percent);
    }

    // Show a privacy options button if required.
    @Kroll.method
    public boolean isPrivacyOptionsRequired() {
        Log.w(TAG, "isPrivacyOptionsRequired?");
        if (consentInformation != null) {
            Log.d(TAG, String.valueOf(consentInformation.getPrivacyOptionsRequirementStatus()));
            Log.d(TAG, String.valueOf(ConsentInformation.PrivacyOptionsRequirementStatus.REQUIRED));
            return consentInformation.getPrivacyOptionsRequirementStatus() == ConsentInformation.PrivacyOptionsRequirementStatus.REQUIRED;
        }
        return false;
    }

    @Kroll.method
    public boolean isAdmobReady(){
        return INIT_READY;
    }

    @Kroll.method
    public void setInMobiGDPRConsent(KrollDict d){
        if(d.containsKey((Object) "enabled")){
            Log.d(TAG, "setInMobiGDPRConsent containsKey enabled");
            setInMobi_updateGDPRConsent(d.getBoolean("enabled"));
        }
    }

    public static void setInMobi_updateGDPRConsent(boolean isEnable) {
        JSONObject consentObject = new JSONObject();
        try {
            if (isEnable){
                consentObject.put(InMobiSdk.IM_GDPR_CONSENT_AVAILABLE, true);
                consentObject.put("gdpr", "1");
                Log.d(TAG, "inMobi GDPR enabled");
            } else {
                consentObject.put(InMobiSdk.IM_GDPR_CONSENT_AVAILABLE, true);
                consentObject.put("gdpr", "0");
                Log.d(TAG, "inMobi GDPR disabled");
            }
            InMobiConsent.updateGDPRConsent(consentObject);
        } catch (JSONException exception) {
            Log.e(TAG, "inMobi GDPR update error");
            exception.printStackTrace();
            return;
        }
    }

    @Kroll.method
    public void setAppLovinGDPRConsent(KrollDict d){
        if(d.containsKeyAndNotNull("enabled")){
            Log.d(TAG, "setAppLovinGDPRConsent containsKey enabled");
            setAppLovin_GDPRConsent(d.getBoolean("enabled"));
        }
    }

    private static void setAppLovin_GDPRConsent(boolean isEnable){
        // EU consent and GDPR
        AppLovinPrivacySettings.setHasUserConsent(isEnable, TiApplication.getInstance().getCurrentActivity());
        // CCPA
        AppLovinPrivacySettings.setDoNotSell(!isEnable, TiApplication.getInstance().getCurrentActivity());
    }

    // CONSENT STATUS
    @Kroll.constant
    public static final int DEBUG_GEOGRAPHY_EEA = ConsentDebugSettings.DebugGeography.DEBUG_GEOGRAPHY_EEA;
    @Kroll.constant
    public static final int DEBUG_GEOGRAPHY_DISABLED = ConsentDebugSettings.DebugGeography.DEBUG_GEOGRAPHY_DISABLED;
    @Kroll.constant
    public static final int DEBUG_GEOGRAPHY_OTHER = ConsentDebugSettings.DebugGeography.DEBUG_GEOGRAPHY_OTHER;
    @Kroll.constant
    public static final int DEBUG_GEOGRAPHY_REGULATED_US_STATE = ConsentDebugSettings.DebugGeography.DEBUG_GEOGRAPHY_REGULATED_US_STATE;

    @Kroll.method
    private void requestConsentForm(@Kroll.argument(optional = true) Integer debugGeography) {

        int safeDebugGeographyValue = DEBUG_GEOGRAPHY_DISABLED;

        if (debugGeography != null) {
            safeDebugGeographyValue = debugGeography.intValue();
            Log.d(TAG, ("RequestConsentForm with debugGeography: " + safeDebugGeographyValue));
        }

        Context appContext = TiApplication.getInstance().getApplicationContext();
        Context currentActivity = TiApplication.getInstance().getCurrentActivity();

        ConsentDebugSettings debugSettings = new ConsentDebugSettings.Builder(appContext)
                .setDebugGeography(safeDebugGeographyValue)
                .addTestDeviceHashedId(TEST_DEVICE_ID)
                .build();

        deleteTCStringIfOutdated(appContext);

        // Set tag for underage of consent. false means users are not underage.
        ConsentRequestParameters params = new ConsentRequestParameters
                .Builder()
                .setConsentDebugSettings(debugSettings)
                .setTagForUnderAgeOfConsent(false)
                .build();

        consentInformation = UserMessagingPlatform.getConsentInformation(appContext);
        consentInformation.requestConsentInfoUpdate((Activity) currentActivity, params,
                new ConsentInformation.OnConsentInfoUpdateSuccessListener() {
                    @Override
                    public void onConsentInfoUpdateSuccess() {
                        // The consent information state was updated.
                        // You are now ready to check if a form is available.
                        if(consentInformation.getConsentStatus() == ConsentInformation.ConsentStatus.REQUIRED) {
                            Log.d(TAG, ("Consent information is REQUIRED! Calling loadForm()"));
                            if (hasListeners(CONSENT_REQUIRED)) {
                                fireEvent(CONSENT_REQUIRED, new KrollDict());
                                loadForm();
                            }
                        } else {
                            Log.d(TAG, ("Consent information is NOT REQUIRED!"));
                            if (hasListeners(CONSENT_NOT_REQUIRED)) {
                                fireEvent(CONSENT_NOT_REQUIRED, new KrollDict());
                            }
                        }
                    }
                },
                new ConsentInformation.OnConsentInfoUpdateFailureListener() {
                    @Override
                    public void onConsentInfoUpdateFailure(FormError formError) {
                        // Handle the error.
                        Log.e(TAG, ("ConsentForm Update Failure : " + formError.getMessage()));
                        if (hasListeners(CONSENT_INFO_UPDATE_FAILURE)) {
                            KrollDict errorCallback = new KrollDict();
                            errorCallback.put("message", formError.getMessage());
                            errorCallback.put("code", formError.getErrorCode());
                            fireEvent(CONSENT_INFO_UPDATE_FAILURE, errorCallback);
                        }
                    }
                }
        );
    }

    /**
     * This function checks the date of last consent, which is base64-encoded in digits 1..7 of a string that is stored
     * in SharedPreferences under the key "IABTCF_TCString".
     *
     * If this date is older than 365 days, the entry with that key will be removed from SharedPreferences. With the IABTCF
     * configuration now being invalid, the CMP should re-display the consent dialog the next time it is instantiated.
     *
     * This should avoid errors of any used ad solution, which is supposed to consider consent older than 13 months "outdated".
     */
    public void deleteTCStringIfOutdated(Context context) {

        // SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);
        // Substitui o método deprecrado com um nome de arquivo específico para SharedPreferences
        SharedPreferences sharedPrefs = context.getSharedPreferences("default_preferences", Context.MODE_PRIVATE);

        // get IABTCF string containing creation timestamp;
        // if the key does not exist, there is no IABTCF string to check; return early
        String tcString = sharedPrefs.getString("IABTCF_TCString", null);
        if (tcString == null) {
            return;
        }

        // base64 alphabet used to store data in IABTCF string
        String base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";

        // date is stored in digits 1..7 of the IABTCF string
        String dateSubstring = tcString.substring(1,7);

        // interpret date substring as base64-encoded integer value
        long timestamp = 0;
        for (int i = 0; i < dateSubstring.length(); i++) {
            char c = dateSubstring.charAt(i);

            int value = base64.indexOf(c);
            timestamp = timestamp * 64 + value;
        }

        // timestamp is given is deci-seconds, convert to milliseconds
        timestamp *= 100;

        // compare with current timestamp to get age in days
        long daysAgo = (System.currentTimeMillis() - timestamp) / (1000*60*60*24);

        // delete TC string if age is over a year
        if (daysAgo > 365) {
            sharedPrefs.edit().remove("IABTCF_TCString").apply();
        }
    }

    private void loadForm(){

        Log.d(TAG, "loadForm running...");
	    Context appContext = TiApplication.getInstance().getCurrentActivity();

        UserMessagingPlatform.loadConsentForm(
                appContext,
                new UserMessagingPlatform.OnConsentFormLoadSuccessListener() {
                    @Override
                    public void onConsentFormLoadSuccess(ConsentForm consentForm) {

                        if (hasListeners(CONSENT_FORM_LOADED)) {
                            Log.d(TAG, ("Consent form is LOADED! You should call showConsentForm()"));
                            fireEvent(CONSENT_FORM_LOADED, new KrollDict());
                        }
                    }
                },
                new UserMessagingPlatform.OnConsentFormLoadFailureListener() {
                    @Override
                    public void onConsentFormLoadFailure(FormError formError) {
                        Log.e(TAG, ("ConsentForm error : " + formError.getMessage()));
                        if (hasListeners(CONSENT_ERROR)) {
                            KrollDict errorCallback = new KrollDict();
                            errorCallback.put("message", formError.getMessage());
                            fireEvent(CONSENT_ERROR, errorCallback);
                        }
                    }
                }
        );
    }

    // CONSENT STATUS
    @Kroll.constant
    public static final int CONSENT_STATUS_NOT_REQUIRED = ConsentInformation.ConsentStatus.NOT_REQUIRED;
    @Kroll.constant
    public static final int CONSENT_STATUS_OBTAINED = ConsentInformation.ConsentStatus.OBTAINED;
    @Kroll.constant
    public static final int CONSENT_STATUS_REQUIRED = ConsentInformation.ConsentStatus.REQUIRED;
    @Kroll.constant
    public static final int CONSENT_STATUS_UNKNOWN = ConsentInformation.ConsentStatus.UNKNOWN;

    @Kroll.constant
    public static final int CONSENT_INFO_NOT_READY = 99;


    @Kroll.method
    public void setTestDeviceId(String deviceId){

        TEST_DEVICE_ID = deviceId;

        List<String> testDeviceIds = Arrays.asList(deviceId);
        RequestConfiguration configuration =
                new RequestConfiguration.Builder().setTestDeviceIds(testDeviceIds).build();
        MobileAds.setRequestConfiguration(configuration);
    }

    @Kroll.method
    public int getConsentStatus(){
        if (consentInformation != null) {
            return consentInformation.getConsentStatus();
        }
        Log.e(TAG, ("ConsentStatus error : CONSENT_INFO_NOT_READY. Did you call requestConsentForm()"));
        return CONSENT_INFO_NOT_READY;
    }

    @Kroll.method
    public Boolean canRequestAds(){
        return consentInformation.canRequestAds();
    }

    @Kroll.method
    public Boolean isConsentFormAvailable(){
        if (consentInformation != null) {
            return consentInformation.isConsentFormAvailable();
        }
        return false;
    }

    @Kroll.method
    public void showConsentForm(){

        Context currentActivity = TiApplication.getInstance().getCurrentActivity();

        UserMessagingPlatform.showPrivacyOptionsForm((Activity) currentActivity,
                new ConsentForm.OnConsentFormDismissedListener() {
                    @Override
                    public void onConsentFormDismissed(@Nullable FormError formError) {
                        Log.d(TAG, ("onConsentFormDismissed : CONSENT_FORM_DISMISSED"));
                        // Handle dismissal by reloading form.
                        if (hasListeners(CONSENT_FORM_DISMISSED)) {
                            KrollDict errorCallback = new KrollDict();
                            if (formError != null){
                                errorCallback.put("message", formError.getMessage());
                            }
                            fireEvent(CONSENT_FORM_DISMISSED, errorCallback);
                        }
                        // loadForm();
                    }
                }
        );
    }

    @Kroll.method
    public void resetConsentForm(){
        if (consentInformation != null) {
            consentInformation.reset();
        } else {
            Log.e(TAG, ("ConsentStatus error : CONSENT_INFO_NOT_READY. Did you call requestConsentForm()"));
        }
    }

    public static Bundle convertKrollDictToBundle(KrollDict krollDict) {
        Bundle bundle = new Bundle();

        if (krollDict != null) {
            for (String key : krollDict.keySet()) {
                Object value = krollDict.get(key);

                if (value instanceof String) {
                    bundle.putString(key, (String) value);
                } else if (value instanceof Integer) {
                    bundle.putInt(key, (Integer) value);
                } else if (value instanceof Boolean) {
                    bundle.putBoolean(key, (Boolean) value);
                } else if (value instanceof Double) {
                    bundle.putDouble(key, (Double) value);
                } else if (value instanceof Float) {
                    bundle.putFloat(key, (Float) value);
                } else if (value instanceof Long) {
                    bundle.putLong(key, (Long) value);
                } else if (value instanceof String[]) {
                    bundle.putStringArray(key, (String[]) value);
                } else if (value instanceof int[]) {
                    bundle.putIntArray(key, (int[]) value);
                } else if (value instanceof boolean[]) {
                    bundle.putBooleanArray(key, (boolean[]) value);
                } else {
                    Log.w("Admob Module", "Unsupported type for key: " + key + ", value: " + value);
                }
            }
        }

        return bundle;
    }

    public static Bundle mapToBundle(Map<String, Object> map) {
        if (map == null) {
            return new Bundle();
        }

        Bundle bundle = new Bundle(map.size());

        for (String key : map.keySet()) {
            Object val = map.get(key);
            if (val == null) {
                bundle.putString(key, null);
            } else if (val instanceof TiBlob) {
                bundle.putByteArray(key, ((TiBlob) val).getBytes());
            } else if (val instanceof TiBaseFile) {
                try {
                    bundle.putByteArray(key, ((TiBaseFile) val).read().getBytes());
                } catch (IOException e) {
                    Log.e(TAG, "Unable to put '" + key + "' value into bundle: " + e.getLocalizedMessage(), e);
                }
            } else {
                bundle.putString(key, TiConvert.toString(val));
            }
        }

        return bundle;
    }

    public static Bundle createAdRequestProperties() {
        Bundle bundle = new Bundle();
        if (prop_color_bg != null) {
            Log.d(TAG, "color_bg: " + prop_color_bg);
            bundle.putString("color_bg", prop_color_bg);
        }
        if (prop_color_bg_top != null)
            bundle.putString("color_bg_top", prop_color_bg_top);
        if (prop_color_border != null)
            bundle.putString("color_border", prop_color_border);
        if (prop_color_text != null)
            bundle.putString("color_text", prop_color_text);
        if (prop_color_link != null)
            bundle.putString("color_link", prop_color_link);
        if (prop_color_url != null)
            bundle.putString("color_url", prop_color_url);
        if (extras != null)
            bundle.putAll(extras);

        return bundle;
    }

    public static String getErrorReason(int errorCode) {
        String errorReason = "";
        switch (errorCode) {
            case 0: {
                errorReason = "Internal error";
                break;
            }
            case 1: {
                errorReason = "Invalid request";
                break;
            }
            case 2: {
                errorReason = "Network Error";
                break;
            }
            case 3: {
                errorReason = "No fill";
            }
        }
        return errorReason;
    }

    /*
    Currently the "Do not consent" button sets the followings ( Android / user-messaging-platform:2.1.0 ):

    hasGoogleVendorConsent: false
    hasGoogleVendorLI: true
    hasConsent for purposes: 1-false, 3-false, 4-false
    hasConsentOrLegitimateInterest for purposes: 2-true, 7-true, 9-true, 10-true

    According to this description ( https://support.google.com/admob/answer/9760862#consent-policies ):
      - Personalized ads - Consent for purposes 1,3,4, Legitimate Interest for 2, 7, 9, 10
      - Non personalized ads - Consent for purpose 1, Legitimate Interest for 2, 7, 9, 10
      - Limited ads - No consent for purpose 1

    It is obvious, that without purpose 1 (and the Google vendor consent) no ads will be served, not even non-personalized ones.

    This should be changed inside of the UMP lib.
    https://groups.google.com/g/google-admob-ads-sdk/c/xRaBKayC_80/m/1d0GktrHBQAJ
     */

    @Kroll.method
    public boolean isGDPR(){
        return isGDPR(TiApplication.getInstance());
    }
 
    public boolean isGDPR(Context context) {
        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext());
        //Context context = TiApplication.getInstance();
        //SharedPreferences prefs = context.getSharedPreferences("default_preferences", Context.MODE_PRIVATE);
        int gdpr = prefs.getInt("IABTCF_gdprApplies", 0);
        Log.d(TAG, "gdprApplies: " + gdpr);
        return gdpr == 1;
    }

    @Kroll.method
    public boolean canShowAds(){
        return canShowAds(TiApplication.getInstance());
    }

    public boolean canShowAds(Context context){
        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext());
        // Substitui o método deprecrado com um nome de arquivo específico para SharedPreferences
        // SharedPreferences prefs = context.getSharedPreferences("default_preferences", Context.MODE_PRIVATE);

//        int gad_rdp = prefs.getInt("gad_rdp", 100);
//        if (gad_rdp == 1 || gad_rdp == 0){
//            Log.d(TAG, "Form is from U.S. states privacy!");
//            return true;
//        }

        String purposeConsent = prefs.getString("IABTCF_PurposeConsents", "");
        Log.d(TAG, "purposeConsent: " + purposeConsent);
        String vendorConsent = prefs.getString("IABTCF_VendorConsents","");
        Log.d(TAG, "vendorConsent: " + vendorConsent);
        String vendorLI = prefs.getString("IABTCF_VendorLegitimateInterests","");
        Log.d(TAG, "vendorLI: " + vendorLI);
        String purposeLI = prefs.getString("IABTCF_PurposeLegitimateInterests","");
        Log.d(TAG, "purposeLI: " + purposeLI);

        int googleId = 755;
        boolean hasGoogleVendorConsent = hasAttribute(vendorConsent, googleId);
        Log.d(TAG, "hasGoogleVendorConsent: " + hasGoogleVendorConsent);
        boolean hasGoogleVendorLI = hasAttribute(vendorLI, googleId);
        Log.d(TAG, "hasGoogleVendorLI: " + hasGoogleVendorLI);

        List<Integer> indexes = new ArrayList<>();
        indexes.add(1);

        List<Integer> indexesLI = new ArrayList<>();
        indexesLI.add(2);
        indexesLI.add(7);
        indexesLI.add(9);
        indexesLI.add(10);

        return hasConsentFor(indexes, purposeConsent, hasGoogleVendorConsent)
                && hasConsentOrLegitimateInterestFor(indexesLI, purposeConsent, purposeLI, hasGoogleVendorConsent, hasGoogleVendorLI);

    }

    @Kroll.method
    public boolean canShowPersonalizedAds(){
        return canShowPersonalizedAds(TiApplication.getInstance());
    }

    public boolean canShowPersonalizedAds(Context context){
        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext());
        // Substitui o método deprecrado com um nome de arquivo específico para SharedPreferences
        // SharedPreferences prefs = context.getSharedPreferences("default_preferences", Context.MODE_PRIVATE);

//        int gad_rdp = prefs.getInt("gad_rdp", 100);
//        if (gad_rdp == 1 || gad_rdp == 0){
//            Log.d(TAG, "Form is from U.S. states privacy!");
//            return true;
//        }

        String purposeConsent = prefs.getString("IABTCF_PurposeConsents", "");
        Log.d(TAG, "purposeConsent: " + purposeConsent);
        String vendorConsent = prefs.getString("IABTCF_VendorConsents","");
        Log.d(TAG, "vendorConsent: " + vendorConsent);
        String vendorLI = prefs.getString("IABTCF_VendorLegitimateInterests","");
        Log.d(TAG, "vendorLI: " + vendorLI);
        String purposeLI = prefs.getString("IABTCF_PurposeLegitimateInterests","");
        Log.d(TAG, "purposeLI: " + purposeLI);

        int googleId = 755;
        boolean hasGoogleVendorConsent = hasAttribute(vendorConsent, googleId);
        Log.d(TAG, "hasGoogleVendorConsent: " + hasGoogleVendorConsent);
        boolean hasGoogleVendorLI = hasAttribute(vendorLI, googleId);
        Log.d(TAG, "hasGoogleVendorLI: " + hasGoogleVendorLI);

        List<Integer> indexes = new ArrayList<>();
        indexes.add(1);
        indexes.add(3);
        indexes.add(4);

        List<Integer> indexesLI = new ArrayList<>();
        indexesLI.add(2);
        indexesLI.add(7);
        indexesLI.add(9);
        indexesLI.add(10);

        return hasConsentFor(indexes, purposeConsent, hasGoogleVendorConsent)
                && hasConsentOrLegitimateInterestFor(indexesLI, purposeConsent, purposeLI, hasGoogleVendorConsent, hasGoogleVendorLI);

    }

    private boolean hasAttribute(String input, int index) {
        if (input == null) return false;
        return input.length() >= index && input.charAt(index-1) == '1';
    }

    private boolean hasConsentFor(List<Integer> indexes, String purposeConsent, boolean hasVendorConsent) {
        for (Integer p: indexes) {
            if (!hasAttribute(purposeConsent, p)) {
                Log.e(TAG, "hasConsentFor: denied for purpose #" + p );
                return false;
            }
        }
        return hasVendorConsent;
    }

    private boolean hasConsentOrLegitimateInterestFor(List<Integer> indexes, String purposeConsent, String purposeLI, boolean hasVendorConsent, boolean hasVendorLI){
        for (Integer p: indexes) {
            boolean purposeAndVendorLI = hasAttribute(purposeLI, p) && hasVendorLI;
            boolean purposeConsentAndVendorConsent = hasAttribute(purposeConsent, p) && hasVendorConsent;
            boolean isOk = purposeAndVendorLI || purposeConsentAndVendorConsent;
            if (!isOk){
                Log.e(TAG, "hasConsentOrLegitimateInterestFor: denied for #" + p);
                return false;
            }
        }
        return true;
    }

    public static Float convertPercentage(String percentage) {
        if (percentage == null || !percentage.endsWith("%")) {
            throw new IllegalArgumentException("Invalid Format. The string must end in '%'.");
        }
        try {
            String numericPart = percentage.substring(0, percentage.length() - 1).trim();
            float value = Float.parseFloat(numericPart);
            return value / 100f;
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("Invalid number in the percentage string.");
        }
    }

    /*
     * ca-app-pub-3940256099942544/6300978111 Interstitial
     * ca-app-pub-3940256099942544/1033173712 Interstitial Video
     * ca-app-pub-3940256099942544/8691691433 Rewarded Video
     * ca-app-pub-3940256099942544/5224354917 Native Advanced
     * ca-app-pub-3940256099942544/2247696110 Native Advanced Video
     * ca-app-pub-3940256099942544/1044960115 Banner
     * ca-app-pub-3940256099942544/3419835294 Open App
     */
}